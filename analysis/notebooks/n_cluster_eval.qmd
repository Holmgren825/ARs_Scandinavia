---
title: Check relevant number of clusters.
jupyter:
  jupytext:
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.16.4
  kernelspec:
    display_name: ar_ident
    language: python
    name: ar_ident
---

```{python}
import os

import cf_xarray
import dask.array as da
import numpy as np
import ultraplot as plt
import xarray as xr
from ar_scandinavia.utils import subsel_ds
from dask.distributed import Client
from dask_ml.cluster import KMeans
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_samples, silhouette_score
from tqdm.autonotebook import tqdm
```

```{python}
client = Client()
```

```{python}
plt.rc["font.size"] = 7
#plt.rc["cmap.discrete"] = False
```

```{python}
LAT_SLICE = (50, 74)
LON_SLICE = (-10, 45)
```

```{python}
BASE_PATH = "/data/projects/atmo_rivers_scandinavia/"
ARDT_NAMES = ["Mundhenk_v3", "Reid500", "GuanWaliser_v2", "TempestLR"]

MAX_CLUSTERS = 12
MIN_CLUSTERS = 2
```

```{python}
def compute_cluster_scores(ds: xr.Dataset) -> list[list]:
    data = ds.ar_tracked_id.data
    data = data.reshape(data.shape[0], -1)
    data[da.isnan(data)] = 0
    data[data > 1] = 1

    if not isinstance(ds.ar_tracked_id.data, np.ndarray):
        data = data.persist()

    inertia_scores = []
    silhouette_scores = []
    silhouette_score_samples = []
    labels_list = []
    for n_clusters in tqdm(range(MIN_CLUSTERS, MAX_CLUSTERS + 1)):
        kmeans = KMeans(n_clusters=n_clusters)
        kmeans.fit(data)
        inertia_scores.append(kmeans.inertia_)
        labels = kmeans.predict(data)
        labels_list.append(labels)
        silhouette_scores.append(silhouette_score(data, labels))
        silhouette_score_samples.append(silhouette_samples(data, labels))

    res = {
        "inertia": inertia_scores,
        "silhouette_avg": silhouette_scores,
        "silhouette_samples": silhouette_score_samples,
        "labels": labels_list,
    }
    return res
```

# Silhoutte

```{python}
res_d = {}
for ardt_name in tqdm(ARDT_NAMES):
    ar_path = os.path.join(
        BASE_PATH,
        f"ERA5.{ardt_name}",
        f"ERA5.{ardt_name}.scand_ars.collapsed.1980-2019.zarr",
    )
    ds = xr.open_zarr(ar_path)
    ds = subsel_ds(ds, LAT_SLICE, LON_SLICE)
    # Coarsen the dataset
    # ds = ds.coarsen(lat=8, lon=8, boundary="pad").max().load()
    res = compute_cluster_scores(ds)
    res_d[ardt_name] = res
```

```{python}
local_min_clusters = 2
local_max_clusters = 10
n_clusters = local_max_clusters - local_min_clusters + 1

for ardt_i, ardt_name in enumerate(ARDT_NAMES):
    
    fig, ax = plt.subplots(figwidth="12cm", nrows=3, ncols=3, sharex=True, sharey=True)
    
    for cluster_i, curr_n_clusters in enumerate(range(local_min_clusters, local_max_clusters + 1)):
        sample_silhouette_values = res_d[ardt_name]["silhouette_samples"][cluster_i]
        silhouette_avg = res_d[ardt_name]["silhouette_avg"][cluster_i]
        cluster_labels = res_d[ardt_name]["labels"][cluster_i]
        y_lower = 10
        for i in range(curr_n_clusters):
            # Aggregate the silhouette scores for samples belonging to
            # cluster i, and sort them
            ith_cluster_silhouette_values = sample_silhouette_values[
                cluster_labels == i
            ]

            ith_cluster_silhouette_values.sort()

            size_cluster_i = ith_cluster_silhouette_values.shape[0]
            y_upper = y_lower + size_cluster_i

            # color = cm.nipy_spectral(float(i) / n_clusters)
            ax[cluster_i].fill_betweenx(
                np.arange(y_lower, y_upper),
                0,
                ith_cluster_silhouette_values,
                # facecolor=color,
                # edgecolor=color,
                alpha=0.7,
            )

            # Label the silhouette plots with their cluster numbers at the middle
            ax[cluster_i].text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))

            # Compute the new y_lower for next plot
            y_lower = y_upper + 10  # 10 for the 0 samples
        ax[cluster_i].axvline(x=silhouette_avg, ls="--", c="k", lw=0.7)
        ax[cluster_i].format(ylim=[0, len(sample_silhouette_values) * 1.1])

    ax[:, 0].format(
        ylabel="Samples"
    )
    
    ax.format(
        xlim=(-0.25, 1),
        #collabels=ARDT_NAMES[:1],
        xlabel="Silhouette",
        #title=list(range(local_min_clusters, local_max_clusters + 1)),
        suptitle=f"{ardt_name}: silhouette plot",
    )
    
    fig.savefig(f"../../figures/n_cluster_eval_norm_res_{ardt_name}.svg")
```
